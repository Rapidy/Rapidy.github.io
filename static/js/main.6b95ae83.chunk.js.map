{"version":3,"sources":["components/Footer/Footer.jsx","img/location.svg","components/Header/City.jsx","components/Header/Temp.jsx","components/Header/Header.jsx","img/sun.svg","img/storm.svg","img/cloud.svg","img/rain.svg","img/partly cloudy.svg","components/Weather.jsx","components/Preloader.jsx","App.js","index.js"],"names":["Footer","activeTempType","wind","pressure","humidity","windDetection","deg","useEffect","setActiveUnits","useState","activeUnits","currentUnits","windSide","pressureValue","className","speed","toFixed","City","name","onSetMyPosition","onChangeCity","showSearch","setShowSearch","city","setCity","cities","setCities","axios","get","then","resp","data","availableCities","map","item","value","onClick","src","locationIcon","alt","onChange","e","target","type","placeholder","list","id","activeCity","filter","shift","coords","Temp","onTempTypeChange","Header","Weather","temp","descr","weatherId","description","toUpperCase","slice","length","currentWeather","setCurrentWeather","storm","rain","sun","partlyCloudy","cloud","Preloader","App","weather","setWeather","activeWeather","setActiveWeather","isLoaded","setIsLoaded","setActiveTempType","lat","long","setCoords","checkWeatherCondition","weatherCondition","url","navigator","geolocation","getCurrentPosition","position","latitude","longitude","alert","main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b95ae83.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './footer.sass';\r\n\r\nexport default function Footer({ activeTempType, wind, pressure, humidity }) {\r\n  const windDetection = () => {\r\n    if (wind.deg >= 330 || wind.deg <= 40) {\r\n      return 'северный';\r\n    } else if (wind.deg >= 240) {\r\n      return 'западный';\r\n    } else if (wind.deg >= 40 || wind.deg <= 110) {\r\n      return 'восточный';\r\n    } else {\r\n      return 'южный';\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    windDetection();\r\n  }, [wind.deg]);\r\n\r\n  useEffect(() => {\r\n    setActiveUnits(activeTempType);\r\n  }, [activeTempType]);\r\n\r\n  const [activeUnits, setActiveUnits] = useState(activeTempType);\r\n  const currentUnits = activeUnits === 'metric' ? 'м/c' : 'миль/ч';\r\n\r\n  const windSide = windDetection(wind);\r\n  const pressureValue = (pressure / 133.3224) * 100;\r\n\r\n  return (\r\n    <footer className='footer'>\r\n      <div className='footer-container'>\r\n        <div className='footer-container__item'>\r\n          <h3>Ветер</h3>\r\n          <p>\r\n            <span>{wind.speed.toFixed()}</span> {currentUnits}, {windSide}\r\n          </p>\r\n        </div>\r\n\r\n        <div className='footer-container__item'>\r\n          <h3>Давление</h3>\r\n          <p>\r\n            <span>{pressureValue.toFixed()}</span> мм рт. ст.\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='footer-container'>\r\n        <div className='footer-container__item'>\r\n          <h3>Влажность</h3>\r\n          <p>\r\n            <span>{humidity}</span>%\r\n          </p>\r\n        </div>\r\n\r\n        <div className='footer-container__item'>\r\n          <h3>Вероятность дождя</h3>\r\n          <p>\r\n            <span>10</span>%\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/location.2dfb72ad.svg\";","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport locationIcon from '../../img/location.svg';\r\n\r\nexport default function City({ name, onSetMyPosition, onChangeCity }) {\r\n  const [showSearch, setShowSearch] = useState(false);\r\n  const [city, setCity] = useState('');\r\n  const [cities, setCities] = useState([]);\r\n\r\n  const onShowSearch = () => {\r\n    setShowSearch(true);\r\n    setCity('');\r\n  };\r\n\r\n  const onSave = () => {\r\n    setShowSearch(false);\r\n\r\n    const activeCity = cities.filter((item) => item.name === city).shift();\r\n    if (city) onChangeCity(activeCity.coords);\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get('http://localhost:3000/cities.json')\r\n      .then((resp) => setCities(resp.data.cities));\r\n  }, []);\r\n\r\n  const availableCities = cities.map((item) => {\r\n    return (\r\n      <option key={item.name} value={item.name}>\r\n        {item.name}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className='header-city'>\r\n      <h2 className='header-city__name'>{name}</h2>\r\n      <div className={`header-city-btns ${showSearch ? 'hide' : ''}`}>\r\n        <button onClick={onShowSearch} className='header-city-btns__btn'>\r\n          Сменить город\r\n        </button>\r\n        <button onClick={onSetMyPosition} className='header-city-btns__btn'>\r\n          <img src={locationIcon} alt='Иконка местоположения' />\r\n          Мое местоположение\r\n        </button>\r\n      </div>\r\n\r\n      <div className={`header-city-change ${showSearch ? 'show' : ''}`}>\r\n        <input\r\n          onChange={(e) => setCity(e.target.value)}\r\n          value={city}\r\n          type='text'\r\n          className='header-city-change__input'\r\n          placeholder='Введите название города'\r\n          list='cities'\r\n        />\r\n\r\n        <datalist className='header-city-change__datalist' id='cities'>\r\n          {availableCities}\r\n        </datalist>\r\n\r\n        <button onClick={onSave} className='header-city-change__btn'>\r\n          ОК\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Temp({ activeTempType, onTempTypeChange }) {\r\n  return (\r\n    <div className='header-temp'>\r\n      <button\r\n        id='1'\r\n        onClick={onTempTypeChange}\r\n        className={`header-temp__btn ${activeTempType === 'metric' ? 'active' : ''}`}>\r\n        C\r\n      </button>\r\n      <button\r\n        id='2'\r\n        onClick={onTempTypeChange}\r\n        className={`header-temp__btn ${activeTempType === 'imperial' ? 'active' : ''}`}>\r\n        F\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './header.sass';\r\n\r\nimport City from './City';\r\nimport Temp from './Temp';\r\n\r\nexport default function Header({\r\n  name,\r\n  activeTempType,\r\n  onTempTypeChange,\r\n  onSetMyPosition,\r\n  onChangeCity,\r\n}) {\r\n  return (\r\n    <div className='header'>\r\n      <City name={name} onSetMyPosition={onSetMyPosition} onChangeCity={onChangeCity} />\r\n      <Temp activeTempType={activeTempType} onTempTypeChange={onTempTypeChange} />\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/sun.5f4a8e48.svg\";","export default __webpack_public_path__ + \"static/media/storm.8596a268.svg\";","export default __webpack_public_path__ + \"static/media/cloud.537bf324.svg\";","export default __webpack_public_path__ + \"static/media/rain.0b103200.svg\";","export default __webpack_public_path__ + \"static/media/partly cloudy.bd05e8ee.svg\";","import React, { useEffect, useState } from 'react';\r\n\r\nimport { sun, cloud, partlyCloudy, storm, rain } from '../img/weatherTypes';\r\n\r\nexport default function Weather({ temp, descr, weatherId }) {\r\n  const description = descr[0].toUpperCase() + descr.slice(1, descr.length);\r\n\r\n  const [currentWeather, setCurrentWeather] = useState('');\r\n\r\n  const weatherDetection = () => {\r\n    if (weatherId >= 200 && weatherId < 300) {\r\n      setCurrentWeather(storm);\r\n    } else if (weatherId >= 300 && weatherId < 600) {\r\n      setCurrentWeather(rain);\r\n    } else if (weatherId === 800) {\r\n      setCurrentWeather(sun);\r\n    } else if (weatherId < 803) {\r\n      setCurrentWeather(partlyCloudy);\r\n    } else {\r\n      setCurrentWeather(cloud);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    weatherDetection();\r\n  }, [weatherId]);\r\n\r\n  return (\r\n    <main className='weather'>\r\n      <h1>\r\n        <img src={currentWeather} alt='Weather icon' />\r\n        {+temp.toFixed()}º\r\n      </h1>\r\n      <span>{description}</span>\r\n    </main>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Preloader() {\r\n  return <div className='app__preloader'>Загрузка погоды...</div>;\r\n}\r\n","import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.sass';\n\nimport Footer from './components/Footer/Footer';\nimport Header from './components/Header/Header';\nimport Weather from './components/Weather';\nimport Preloader from './components/Preloader';\n\nfunction App() {\n  const [weather, setWeather] = useState({});\n  const [activeWeather, setActiveWeather] = useState('clear');\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [activeTempType, setActiveTempType] = useState('metric');\n  const [coords, setCoords] = useState({\n    lat: 54.9924,\n    long: 73.3686,\n  });\n\n  const checkWeatherCondition = () => {\n    if (isLoaded) {\n      const weatherCondition =\n        weather.weather[0].id >= 300 && weather.weather[0].id <= 600 ? 'rain' : 'clear';\n      setActiveWeather(weatherCondition);\n    }\n  };\n\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${coords.lat}&lon=${coords.long}&appid=50593473d5676fb8352c434138876ed0&lang=ru&units=${activeTempType}`;\n\n  useEffect(() => {\n    axios\n      .get(url)\n      .then((resp) => setWeather(resp.data))\n      .then(() => {\n        setIsLoaded(true);\n        checkWeatherCondition();\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(url)\n      .then((resp) => setWeather(resp.data))\n      .then(() => checkWeatherCondition());\n  }, [activeTempType, coords]);\n\n  const onTempTypeChange = (e) => {\n    e.target.id === '1' ? setActiveTempType('metric') : setActiveTempType('imperial');\n  };\n\n  const onSetMyPosition = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setCoords({ lat: position.coords.latitude, long: position.coords.longitude });\n      });\n    } else {\n      alert('Ваш браузер не поддерживает гео-локацию');\n    }\n  };\n\n  const onChangeCity = (city) => {\n    setCoords({ lat: city[0], long: city[1] });\n  };\n\n  return (\n    <div className={`app ${activeWeather === 'rain' ? 'rain' : 'clear'}`}>\n      {isLoaded ? (\n        <div className='app-container'>\n          <Header\n            name={weather.name}\n            activeTempType={activeTempType}\n            onTempTypeChange={onTempTypeChange}\n            onSetMyPosition={onSetMyPosition}\n            onChangeCity={onChangeCity}\n          />\n          <Weather\n            temp={weather.main.temp}\n            descr={weather.weather[0].description}\n            weatherId={weather.weather[0].id}\n          />\n          <Footer\n            activeTempType={activeTempType}\n            wind={weather.wind}\n            pressure={weather.main.pressure}\n            humidity={weather.main.humidity}\n          />\n        </div>\n      ) : (\n        <Preloader />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}